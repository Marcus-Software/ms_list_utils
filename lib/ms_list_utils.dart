library ms_list_utils;

import './functions/functions.dart' as fn;
export './functions/functions.dart';

extension MsListUtils<V> on List<V> {
  /// Returns new list with items generated around [list]
  /// ```dart
  /// final list = ['😁','😒','😊'];
  /// final newList = addAround(list, (index,previous,next) => '🍨');
  /// print(newList);//['🍨','😁','🍨','😒','🍨','😊','🍨']
  /// ```
  List<V> addAround(fn.Generator<V> generate) => fn.addAround(this, generate);

  /// Returns new list with items generated between list.
  List<V> addBetween(fn.Generator<V> generate) => fn.addBetween(this, generate);

  /// Returns a preceding element in the index, if out of bounds returns null.
  V? previous(int index) => fn.previous(this, index);

  /// Returns an element following the index, if out of bounds returns null.
  V? next(int index) => fn.next(this, index);

  /// Returns first element in array, if it's empty returns null.
  V? get firstOrNull => fn.firstOrNull(this);

  /// Returns last element in array, if it's empty returns null.
  V? get lastOrNull => fn.lastOrNull(this);

  /// Returns the first element that satisfies the test if there isn't one add a new one and return it.
  V firstWhereOrAdd(bool Function(V element) test, fn.OrAdd<V> orAdd) =>
      fn.firstWhereOrAdd(this, test, orAdd);

  /// Returns the last element that satisfies the test if there isn't one add a new one and return it.
  V lastWhereOrAdd(bool Function(V element) test, fn.OrAdd<V> orAdd) =>
      fn.lastWhereOrAdd(this, test, orAdd);

  /// Returns a true value if element is the first in the list.
  bool isFirst(V element) => fn.isFirst(this, element);

  /// Returns a true value if index is the first in the list.
  bool isFirstIndex(int index) => fn.isFirstIndex(this, index);

  ///  Returns a true value if element is the last in the list.
  bool isLast(V element) => fn.isLast(this, element);

  ///  Returns a true value if index is the last in the list.
  bool isLastIndex(int index) => fn.isLastIndex(this, index);

  /// It joins all elements of the list with one separator and for the last iteration a different separator.
  String joinLast([String separator = '', String? last]) =>
      fn.join(this, separator, last);

  /// Returns a Map with keys that's generated by generator.
  Map<K, V> toMap<K>(fn.GeneratorKey<V, K> generateKey) =>
      fn.toMap(this, generateKey);

  /// Creates a stream with the items in the list.
  Stream<V> toStream([Duration? interval]) => fn.toStream(this, interval);
}
